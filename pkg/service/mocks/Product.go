// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	SarkorTest "github.com/qsnake66/ProductWerehouse"
	mock "github.com/stretchr/testify/mock"
)

// Product is an autogenerated mock type for the Product type
type Product struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: product
func (_m *Product) CreateProduct(product SarkorTest.Product) (int, error) {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(SarkorTest.Product) (int, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(SarkorTest.Product) int); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(SarkorTest.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: id
func (_m *Product) DeleteProduct(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProduct provides a mock function with given fields:
func (_m *Product) GetAllProduct() ([]SarkorTest.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProduct")
	}

	var r0 []SarkorTest.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]SarkorTest.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []SarkorTest.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SarkorTest.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: id
func (_m *Product) GetProductById(id int) (SarkorTest.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 SarkorTest.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (SarkorTest.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) SarkorTest.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(SarkorTest.Product)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: id, product
func (_m *Product) UpdateProduct(id int, product SarkorTest.Product) error {
	ret := _m.Called(id, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, SarkorTest.Product) error); ok {
		r0 = rf(id, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProduct creates a new instance of Product. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProduct(t interface {
	mock.TestingT
	Cleanup(func())
}) *Product {
	mock := &Product{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
